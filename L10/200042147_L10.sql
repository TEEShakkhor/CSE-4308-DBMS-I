SET SERVEROUTPUT ON SIZE 1000000

1--
DECLARE
    TOTAL_ROWS NUMBER (2);
BEGIN
    UPDATE INSTRUCTOR
        SET SALARY = SALARY + SALARY*.1
        WHERE SALARY < 75000 ;

    IF SQL% NOTFOUND THEN
        DBMS_OUTPUT . PUT_LINE ( 'No instructor satisfied the condition ');
    ELSIF SQL% FOUND THEN
        TOTAL_ROWS := SQL% ROWCOUNT ;
    DBMS_OUTPUT . PUT_LINE ( TOTAL_ROWS || ' instructors updated ');
    END IF;
END ;
/

2--
/*SELECT DISTINCT T.TIME_SLOT_ID, T.DAY, T.start_hr, T.start_min ,T.end_hr, T.end_min
FROM INSTRUCTOR I, TEACHES TE, SECTION S,TIME_SLOT T
WHERE I.ID = E.ID AND TE.COURSE_ID = S.COURSE_ID AND TE.SEC_ID = S.SEC_ID AND TE.SEMESTER = S.SEMESTER AND TE.YEAR = S.YEAR AND S.TIME_SLOT_ID = T.TIME_SLOT_ID;
*/
CREATE OR REPLACE
PROCEDURE PRINT_TIME_SLOT
AS
BEGIN
    
    FOR i IN (SELECT DISTINCT T.TIME_SLOT_ID, T.DAY, T.start_hr, T.start_min ,T.end_hr, T.end_min FROM INSTRUCTOR I, TEACHES TE, SECTION S,TIME_SLOT T WHERE I.ID = tE.ID AND   
                    TE.COURSE_ID = S.COURSE_ID AND TE.SEC_ID = S.SEC_ID AND TE.SEMESTER = S.SEMESTER AND TE.YEAR = S.YEAR AND
                    S.TIME_SLOT_ID = T.TIME_SLOT_ID) LOOP
        DBMS_OUTPUT . PUT_LINE (i.TIME_SLOT_ID || ' ' || i.DAY || ' ' || i.start_hr || ' ' || i.end_hr);
    END LOOP;

END;
/

BEGIN 

        PRINT_TIME_SLOT;

END;
/

3--
CREATE OR REPLACE
PROCEDURE FIND_ADVISORS(NUM IN NUMBER)
AS
ROW NUMBER(3);
BEGIN
    SELECT MAX(ROWNUM) INTO ROW 
    FROM (SELECT I_ID, COUNT(S_ID) AS S_COUNT FROM ADVISOR GROUP BY I_ID ORDER BY S_COUNT DESC);

    IF(NUM>ROW) THEN 
        DBMS_OUTPUT . PUT_LINE ('FAILURE');
        RETURN;
    END IF;

    FOR i IN (SELECT * FROM (SELECT I_ID, COUNT(S_ID) AS S_COUNT FROM ADVISOR GROUP BY I_ID ORDER BY S_COUNT DESC) WHERE ROWNUM<=NUM) LOOP
        DBMS_OUTPUT . PUT_LINE (i.I_ID || ' ' || i.S_COUNT);
    END LOOP;

END;
/

DECLARE
    NUM NUMBER(5);
BEGIN 
    NUM := '& number';
    FIND_ADVISORS(NUM);
END;
/


4--
CREATE SEQUENCE STUDENT_SEQ
MINVALUE 1000
MAXVALUE 9999
START WITH 1000
INCREMENT BY 1
CACHE 20;
CREATE OR REPLACE
    TRIGGER STUDENT_ID_GENERATOR
    BEFORE INSERT ON STUDENT
    FOR EACH ROW
DECLARE
    NEW_ID STUDENT .ID% TYPE ;
BEGIN
    SELECT STUDENT_SEQ . NEXTVAL INTO NEW_ID
    FROM DUAL ;
    :NEW.ID := NEW_ID ;
END ;
/

insert into student values ('', 'Shaks', 'Comp. Sci.', '30');
insert into student values ('2', 'Tees', 'Comp. Sci.', '50');

5--
CREATE OR REPLACE
    TRIGGER ADVISOR_ASSIGNER
    AFTER INSERT ON STUDENT
    FOR EACH ROW
DECLARE
    INST_ID INSTRUCTOR .ID% TYPE ;
BEGIN
    SELECT ID INTO INST_ID
    FROM(
        SELECT ID
        FROM INSTRUCTOR I
        WHERE I.DEPT_NAME = :NEW.DEPT_NAME
    )
    WHERE ROWNUM<=1;
    INSERT INTO ADVISOR VALUES(:NEW.ID, INST_ID); 
END ;
/